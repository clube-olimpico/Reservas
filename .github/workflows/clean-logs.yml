name: Limpar Logs Antigos
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  clean-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependências
        run: npm install axios

      - name: Limpar logs antigos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: 'clube-olimpico'
          REPO_NAME: 'Reservas'
          LOGS_PATH: 'logs/reservas-excluidas.json'
        run: |
          node -e "
            const axios = require('axios');
            const fs = require('fs');

            async function fetchLogs() {
              try {
                const response = await axios.get(
                  'https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/$LOGS_PATH',
                  { headers: { 'Authorization': 'token $GITHUB_TOKEN' } }
                );
                const content = Buffer.from(response.data.content, 'base64').toString('utf8');
                console.log('Conteúdo do arquivo:', content);
                return {
                  content: content,
                  sha: response.data.sha
                };
              } catch (error) {
                console.error('Erro ao buscar logs:', error.response ? error.response.status : error.message);
                throw error;
              }
            }

            function filterLogs(logs) {
              const now = new Date();
              now.setHours(0, 0, 0, 0);
              return logs.filter(log => {
                const [dia, mes, ano] = log.exclusao.split(' ')[0].split('/'); // Correto para 'DD/MM/AAAA'
                const logDate = new Date(ano, mes - 1, parseInt(dia, 10)); // Mês é 0-indexado
                logDate.setHours(0, 0, 0, 0);
                return (now - logDate) <= (7 * 24 * 60 * 60 * 1000);
              });
            }

            async function updateLogs(logs, sha) {
              try {
                const content = Buffer.from(JSON.stringify(logs, null, 2)).toString('base64');
                await axios.put(
                  'https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/$LOGS_PATH',
                  {
                    message: '[Automático] Limpeza de logs antigos',
                    content: content,
                    sha: sha
                  },
                  { headers: { 'Authorization': 'token $GITHUB_TOKEN' } }
                );
                console.log('Logs atualizados com sucesso.');
              } catch (error) {
                console.error('Erro ao atualizar logs:', error.response ? error.response.status : error.message);
                throw error;
              }
            }

            (async () => {
              try {
                const { content, sha } = await fetchLogs();
                const logs = JSON.parse(content);
                const updatedLogs = filterLogs(logs);
                if (logs.length !== updatedLogs.length) {
                  await updateLogs(updatedLogs, sha);
                  console.log('Logs atualizados! Removidos:', logs.length - updatedLogs.length);
                } else {
                  console.log('Nada para limpar.');
                }
              } catch (error) {
                console.error('Erro geral:', error.message);
                process.exit(1);
              }
            })();
          "
