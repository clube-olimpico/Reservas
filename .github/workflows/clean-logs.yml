name: Limpar Logs Antigos
on:
  schedule:
    - cron: '0 7 * * *' # Roda todos os dias às 7h UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  clean-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório 
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependências
        run: npm install axios

      - name: Limpar logs antigos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: 'clube-olimpico'
          REPO_NAME: 'Reservas'
          LOGS_PATH: 'logs/reservas-excluidas.json'
        run: |
          node -e "
            const axios = require('axios');
            
            async function fetchLogs() {
              try {
                const response = await axios.get(
                  'https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/contents/${process.env.LOGS_PATH}',
                  { headers: { 'Authorization': 'token ${process.env.GITHUB_TOKEN}' } }
                );
                const content = Buffer.from(response.data.content, 'base64').toString('utf8');
                return { content: content, sha: response.data.sha };
              } catch (error) {
                if (error.response && error.response.status === 404) return { content: '[]', sha: null };
                console.error('Erro ao buscar logs:', error.response ? error.response.status : error.message);
                throw error;
              }
            }

            function filterLogs(logs) {
              const now = new Date();
              now.setHours(0, 0, 0, 0);
              const sevenDaysInMillis = 7 * 24 * 60 * 60 * 1000;
              return logs.filter(log => {
                if (!log.exclusao) return false;
                const [dia, mes, ano] = log.exclusao.split(' ')[0].split('/');
                const logDate = new Date(ano, mes - 1, parseInt(dia, 10));
                logDate.setHours(0, 0, 0, 0);
                return (now - logDate) <= sevenDaysInMillis;
              });
            }

            async function updateLogs(logs, sha) {
              try {
                // ==========================================================
                // INÍCIO DA CORREÇÃO DEFINITIVA
                // Garante que a string JSON seja tratada como UTF-8 ANTES de codificar para Base64
                // ==========================================================
                const content = Buffer.from(JSON.stringify(logs, null, 2), 'utf8').toString('base64');
                // ==========================================================
                // FIM DA CORREÇÃO
                // ==========================================================
                
                await axios.put(
                  'https://api.github.com/repos/${process.env.REPO_OWNER}/${process.env.REPO_NAME}/contents/${process.env.LOGS_PATH}',
                  {
                    message: '[Automático] Limpeza de logs antigos',
                    content: content,
                    sha: sha
                  },
                  { headers: { 'Authorization': 'token ${process.env.GITHUB_TOKEN}' } }
                );
                console.log('Logs atualizados com sucesso.');
              } catch (error) {
                console.error('Erro ao atualizar logs:', error.response ? error.response.status : error.message);
                throw error;
              }
            }

            (async () => {
              try {
                const { content, sha } = await fetchLogs();
                if (!sha) {
                  console.log('Arquivo de log não encontrado ou vazio. Nada a fazer.');
                  return;
                }
                const logs = JSON.parse(content);
                const updatedLogs = filterLogs(logs);
                if (logs.length !== updatedLogs.length) {
                  await updateLogs(updatedLogs, sha);
                  console.log('Logs atualizados! Removidos:', logs.length - updatedLogs.length);
                } else {
                  console.log('Nada para limpar.');
                }
              } catch (error) {
                console.error('Erro geral:', error.message);
                process.exit(1);
              }
            })();
          "
